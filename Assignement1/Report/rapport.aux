\relax 
\catcode`:\active
\catcode`;\active
\catcode`!\active
\catcode`?\active
\select@language{french}
\@writefile{toc}{\select@language{french}}
\@writefile{lof}{\select@language{french}}
\@writefile{lot}{\select@language{french}}
\@writefile{toc}{\contentsline {section}{\numberline {1}Python AIMA}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}In order to perform a search, what are the classes that you must define or extend ? What are they used for ?}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}In graph\_search and tree\_search, what is the effect of the instruction fringe.extend(node.expand(problem)). What are the classes and methods involved ?}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Both breadth\_first\_graph and depth\_first\_search are making a call to the same function. How s their fundamental difference implemented}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4}How is the closed list implemented in graph\_search? What is it used for? What is the technical difference with the fringe? Why are those two specific structures used?}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5}How technically are the elements in the closed list searched? What are the methods involved? What properties must its elements have?}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.6}How technically can you use the implementation of the closed list to deal with symmetrical states ? (hint: if two symmetrical states are considered to be the same, they will not be visited twice)}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {2}The Sliding Puzzle Problem}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Explain the advantages and weaknesses of each search strategy on this problem (depth first, breadth first, depth limited, iterative deepening, uniform cost). Which one would you choose to solve this problem?}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Are there symmetrical (equivalent) states in this problem? What are the potential consequences on the search?}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}How are you dealing with those symmetrical states?}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}What are the advantages and disadvantages of using the tree and graph search for this problem. Which approach would you choose? Which approach allows you to avoid expending twice symmetrical states?}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5}Implement this problem in Python3. Extend the Problem class and implement the necessary methods and other class(es) if necessary. Your file must be named puzzle.py. Your program must print to the standard output a solution to the puzzle satisfying the above format}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.6}Experiments must be realized with the 10 instances of the puzzle problem provided. Report in a table the results on the 10 instances for depth-first and breadth first strategies on both tree and graph search (4 settings). You must report the time, the number of explored nodes and the number of steps from root to solution. When no solution can be found by a strategy in a reasonable time (3 min), explain the reason (time-out and/or swap of the memory}{3}}
